{"ast":null,"code":"var _jsxFileName = \"/Users/leemadeleine/dev/music-app/music-app/src/components/SimpleScreen/SimpleScreen.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { getSimple } from \"../../services/APIs/MusicAppAPI/MusicAppAPI.js\";\nimport PropTypes from \"prop-types\";\nimport { getRandomNumberMinMax } from \"../../utils/Utils.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div``;\n_c = Container;\nconst getSrc = externalUrl => {\n  const parts = externalUrl.split(\"/playlist/\");\n  const src = parts[0] + \"/embed/playlist/\" + parts[1];\n  return src;\n};\nconst SimpleScreen = _ref => {\n  _s();\n  let {\n    token\n  } = _ref;\n  const [hasError, setHasError] = useState(false);\n  const [allContent, setAllContent] = useState(null);\n  const [currentContent, setCurrentContent] = useState(null);\n  const [fetchSuccess, setFetchSuccess] = useState(false);\n  const [fetchStarted, setFetchStarted] = useState(false);\n  useEffect(() => {\n    // Fetch all playlist info once\n    if (token && !fetchStarted && !fetchSuccess) {\n      const fetchData = async () => {\n        const response = await getSimple(token);\n        const data = response.data;\n        setAllContent(data);\n        setFetchSuccess(true);\n      };\n      try {\n        setFetchStarted(true);\n        fetchData();\n      } catch {\n        setHasError(true);\n        setFetchSuccess(false);\n        setFetchStarted(false);\n      }\n    }\n  }, [token, allContent, fetchStarted, fetchSuccess]);\n\n  // Set/udpate the specific playlist info\n  const setContent = () => {\n    const obj = allContent[getRandomNumberMinMax(0, 49)];\n    setCurrentContent(obj.data);\n  };\n\n  // Initialize the EmbedController and add event listener\n  window.onSpotifyIframeApiReady = IFrameAPI => {\n    let element = document.getElementById(\"embed-iframe\");\n    let options = {\n      uri: \"spotify:playlist:71I1utEsNeXmb4O28RAeaz\"\n    };\n    let callback = EmbedController => {\n      document.querySelector(\"#update-btn\").addEventListener(event => {\n        if (currentContent !== null && currentContent !== void 0 && currentContent.uri) {\n          EmbedController.loadUri(currentContent === null || currentContent === void 0 ? void 0 : currentContent.uri);\n        }\n      });\n    };\n    IFrameAPI.createController(element, options, callback);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Simple Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"update-btn\",\n      onClick: () => setContent(),\n      children: \"Pull random playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), currentContent && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"embed-iframe\",\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        title: \"playlist-iframe\",\n        src: currentContent === null || currentContent === void 0 ? void 0 : currentContent.src,\n        width: \"380\",\n        height: \"380\",\n        frameBorder: \"0\",\n        allow: \"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\n      }, currentContent === null || currentContent === void 0 ? void 0 : currentContent.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), hasError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleScreen, \"5aj3JwyPelIvhlVwD7gnNI92QSI=\");\n_c2 = SimpleScreen;\nSimpleScreen.defaultProps = {\n  token: null\n};\nSimpleScreen.propTypes = {\n  token: PropTypes.string\n};\nexport default SimpleScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"SimpleScreen\");","map":{"version":3,"names":["useEffect","useState","styled","getSimple","PropTypes","getRandomNumberMinMax","Container","div","getSrc","externalUrl","parts","split","src","SimpleScreen","token","hasError","setHasError","allContent","setAllContent","currentContent","setCurrentContent","fetchSuccess","setFetchSuccess","fetchStarted","setFetchStarted","fetchData","response","data","setContent","obj","window","onSpotifyIframeApiReady","IFrameAPI","element","document","getElementById","options","uri","callback","EmbedController","querySelector","addEventListener","event","loadUri","createController","defaultProps","propTypes","string"],"sources":["/Users/leemadeleine/dev/music-app/music-app/src/components/SimpleScreen/SimpleScreen.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { getSimple } from \"../../services/APIs/MusicAppAPI/MusicAppAPI.js\";\nimport PropTypes from \"prop-types\";\nimport { getRandomNumberMinMax } from \"../../utils/Utils.js\";\n\nconst Container = styled.div``;\n\nconst getSrc = (externalUrl) => {\n  const parts = externalUrl.split(\"/playlist/\");\n  const src = parts[0] + \"/embed/playlist/\" + parts[1];\n  return src;\n};\n\nconst SimpleScreen = ({ token }) => {\n  const [hasError, setHasError] = useState(false);\n  const [allContent, setAllContent] = useState(null);\n  const [currentContent, setCurrentContent] = useState(null);\n  const [fetchSuccess, setFetchSuccess] = useState(false);\n  const [fetchStarted, setFetchStarted] = useState(false);\n\n  useEffect(() => {\n    // Fetch all playlist info once\n    if (token && !fetchStarted && !fetchSuccess) {\n      const fetchData = async () => {\n        const response = await getSimple(token);\n        const data = response.data;\n        setAllContent(data);\n        setFetchSuccess(true);\n      };\n      try {\n        setFetchStarted(true);\n        fetchData();\n      } catch {\n        setHasError(true);\n        setFetchSuccess(false);\n        setFetchStarted(false);\n      }\n    }\n  }, [token, allContent, fetchStarted, fetchSuccess]);\n\n  // Set/udpate the specific playlist info\n  const setContent = () => {\n    const obj = allContent[getRandomNumberMinMax(0, 49)];\n    setCurrentContent(obj.data);\n  };\n\n  // Initialize the EmbedController and add event listener\n  window.onSpotifyIframeApiReady = (IFrameAPI) => {\n    let element = document.getElementById(\"embed-iframe\");\n    let options = {\n      uri: \"spotify:playlist:71I1utEsNeXmb4O28RAeaz\",\n    };\n    let callback = (EmbedController) => {\n      document.querySelector(\"#update-btn\").addEventListener((event) => {\n        if (currentContent?.uri) {\n          EmbedController.loadUri(currentContent?.uri);\n        }\n      });\n    };\n    IFrameAPI.createController(element, options, callback);\n  };\n\n  return (\n    <Container>\n      <h1>Simple Screen</h1>\n      {/* {Object.keys(moods).map((moodName) => {\n        const mood = moods[moodName];\n        return (\n          <div key={moodName} onClick={() => setCurrentMood(moodName)}>\n            {mood.displayName}\n          </div>\n        );\n      })} */}\n      <h2 id=\"update-btn\" onClick={() => setContent()}>\n        Pull random playlist\n      </h2>\n      {currentContent && (\n        <div id=\"embed-iframe\">\n          <iframe\n            key={currentContent?.uri}\n            title=\"playlist-iframe\"\n            src={currentContent?.src}\n            width=\"380\"\n            height=\"380\"\n            frameBorder=\"0\"\n            allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\n          ></iframe>\n        </div>\n      )}\n      {hasError && <div>Error</div>}\n    </Container>\n  );\n};\n\nSimpleScreen.defaultProps = {\n  token: null,\n};\n\nSimpleScreen.propTypes = {\n  token: PropTypes.string,\n};\n\nexport default SimpleScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}