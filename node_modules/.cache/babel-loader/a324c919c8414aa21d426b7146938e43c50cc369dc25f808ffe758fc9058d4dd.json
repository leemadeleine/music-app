{"ast":null,"code":"var _jsxFileName = \"/Users/leemadeleine/dev/music-app/music-app/src/components/SimpleScreen/SimpleScreen.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { getSimple } from \"../../services/MusicAppAPI/MusicAppAPI.js\";\nimport { moods } from \"./config.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div``;\n_c = Container;\nconst SimpleScreen = () => {\n  _s();\n  const [hasError, setHasError] = useState(false);\n  const [currentMood, setCurrentMood] = useState(null);\n  const [currentURI, setCurrentURI] = useState(null);\n  useEffect(() => {\n    if (currentMood) {\n      try {\n        async function fetchData() {\n          const response = await getSimple(currentMood);\n          setCurrentURI(response.uri);\n        }\n        fetchData();\n      } catch {\n        setHasError(true);\n      }\n    }\n  }, [currentMood]);\n  useEffect(() => {\n    console.log(currentURI);\n    window.onSpotifyIframeApiReady = IFrameAPI => {\n      console.log(IFrameAPI);\n      let element = document.getElementById(\"embed-iframe\");\n      let options = {\n        uri: \"spotify:episode:7makk4oTQel546B0PZlDM5\"\n      };\n      let callback = EmbedController => {};\n      const controller = IFrameAPI.createController(element, options, callback);\n      console.log(controller);\n      EmbedController.loadUri(currentURI);\n    };\n  }, [currentURI]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Simple Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), Object.keys(moods).map(moodName => {\n      const mood = moods[moodName];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setCurrentMood(moodName),\n        children: mood.displayName\n      }, moodName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"embed-iframe\",\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        title: \"spotify-embed\",\n        src: \"https://open.spotify.com/embed/album/151w1FgRZfnKZA9FEcg9Z3?utm_source=generator\",\n        width: \"380\",\n        height: \"380\",\n        frameBorder: \"0\",\n        allowFullScreen: \"\",\n        allow: \"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), hasError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleScreen, \"JGGpUgYh+MQ4686YyL/G5SZelG4=\");\n_c2 = SimpleScreen;\nexport default SimpleScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"SimpleScreen\");","map":{"version":3,"names":["useEffect","useState","styled","getSimple","moods","Container","div","SimpleScreen","hasError","setHasError","currentMood","setCurrentMood","currentURI","setCurrentURI","fetchData","response","uri","console","log","window","onSpotifyIframeApiReady","IFrameAPI","element","document","getElementById","options","callback","EmbedController","controller","createController","loadUri","Object","keys","map","moodName","mood","displayName"],"sources":["/Users/leemadeleine/dev/music-app/music-app/src/components/SimpleScreen/SimpleScreen.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { getSimple } from \"../../services/MusicAppAPI/MusicAppAPI.js\";\nimport { moods } from \"./config.js\";\n\nconst Container = styled.div``;\n\nconst SimpleScreen = () => {\n  const [hasError, setHasError] = useState(false);\n  const [currentMood, setCurrentMood] = useState(null);\n  const [currentURI, setCurrentURI] = useState(null);\n  useEffect(() => {\n    if (currentMood) {\n      try {\n        async function fetchData() {\n          const response = await getSimple(currentMood);\n          setCurrentURI(response.uri);\n        }\n        fetchData();\n      } catch {\n        setHasError(true);\n      }\n    }\n  }, [currentMood]);\n\n  useEffect(() => {\n    console.log(currentURI);\n    window.onSpotifyIframeApiReady = (IFrameAPI) => {\n      console.log(IFrameAPI);\n      let element = document.getElementById(\"embed-iframe\");\n      let options = {\n        uri: \"spotify:episode:7makk4oTQel546B0PZlDM5\",\n      };\n      let callback = (EmbedController) => {};\n      const controller = IFrameAPI.createController(element, options, callback);\n      console.log(controller);\n      EmbedController.loadUri(currentURI);\n    };\n  }, [currentURI]);\n\n  return (\n    <Container>\n      <h1>Simple Screen</h1>\n      {Object.keys(moods).map((moodName) => {\n        const mood = moods[moodName];\n        return (\n          <div key={moodName} onClick={() => setCurrentMood(moodName)}>\n            {mood.displayName}\n          </div>\n        );\n      })}\n      <div id=\"embed-iframe\">\n        <iframe\n          title=\"spotify-embed\"\n          src=\"https://open.spotify.com/embed/album/151w1FgRZfnKZA9FEcg9Z3?utm_source=generator\"\n          width=\"380\"\n          height=\"380\"\n          frameBorder=\"0\"\n          allowFullScreen=\"\"\n          allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\n        ></iframe>\n      </div>\n\n      {hasError && <div>Error</div>}\n    </Container>\n  );\n};\n\nexport default SimpleScreen;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,SAAS,QAAQ,2CAA2C;AACrE,SAASC,KAAK,QAAQ,aAAa;AAAC;AAEpC,MAAMC,SAAS,GAAGH,MAAM,CAACI,GAAI,EAAC;AAAC,KAAzBD,SAAS;AAEf,MAAME,YAAY,GAAG,MAAM;EAAA;EACzB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAClDD,SAAS,CAAC,MAAM;IACd,IAAIU,WAAW,EAAE;MACf,IAAI;QACF,eAAeI,SAAS,GAAG;UACzB,MAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAACO,WAAW,CAAC;UAC7CG,aAAa,CAACE,QAAQ,CAACC,GAAG,CAAC;QAC7B;QACAF,SAAS,EAAE;MACb,CAAC,CAAC,MAAM;QACNL,WAAW,CAAC,IAAI,CAAC;MACnB;IACF;EACF,CAAC,EAAE,CAACC,WAAW,CAAC,CAAC;EAEjBV,SAAS,CAAC,MAAM;IACdiB,OAAO,CAACC,GAAG,CAACN,UAAU,CAAC;IACvBO,MAAM,CAACC,uBAAuB,GAAIC,SAAS,IAAK;MAC9CJ,OAAO,CAACC,GAAG,CAACG,SAAS,CAAC;MACtB,IAAIC,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;MACrD,IAAIC,OAAO,GAAG;QACZT,GAAG,EAAE;MACP,CAAC;MACD,IAAIU,QAAQ,GAAIC,eAAe,IAAK,CAAC,CAAC;MACtC,MAAMC,UAAU,GAAGP,SAAS,CAACQ,gBAAgB,CAACP,OAAO,EAAEG,OAAO,EAAEC,QAAQ,CAAC;MACzET,OAAO,CAACC,GAAG,CAACU,UAAU,CAAC;MACvBD,eAAe,CAACG,OAAO,CAAClB,UAAU,CAAC;IACrC,CAAC;EACH,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,oBACE,QAAC,SAAS;IAAA,wBACR;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB,EACrBmB,MAAM,CAACC,IAAI,CAAC5B,KAAK,CAAC,CAAC6B,GAAG,CAAEC,QAAQ,IAAK;MACpC,MAAMC,IAAI,GAAG/B,KAAK,CAAC8B,QAAQ,CAAC;MAC5B,oBACE;QAAoB,OAAO,EAAE,MAAMvB,cAAc,CAACuB,QAAQ,CAAE;QAAA,UACzDC,IAAI,CAACC;MAAW,GADTF,QAAQ;QAAA;QAAA;QAAA;MAAA,QAEZ;IAEV,CAAC,CAAC,eACF;MAAK,EAAE,EAAC,cAAc;MAAA,uBACpB;QACE,KAAK,EAAC,eAAe;QACrB,GAAG,EAAC,kFAAkF;QACtF,KAAK,EAAC,KAAK;QACX,MAAM,EAAC,KAAK;QACZ,WAAW,EAAC,GAAG;QACf,eAAe,EAAC,EAAE;QAClB,KAAK,EAAC;MAA4E;QAAA;QAAA;QAAA;MAAA;IAC1E;MAAA;MAAA;MAAA;IAAA,QACN,EAEL1B,QAAQ,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB;EAAA;IAAA;IAAA;IAAA;EAAA,QACnB;AAEhB,CAAC;AAAC,GA3DID,YAAY;AAAA,MAAZA,YAAY;AA6DlB,eAAeA,YAAY;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}