{"ast":null,"code":"var _jsxFileName = \"/Users/leemadeleine/dev/music-app/music-app/src/components/SimpleScreen/SimpleScreen.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { getOembed, getRecommendations, getSimple } from \"../../services/APIs/MusicAppAPI/MusicAppAPI.js\";\nimport PropTypes from \"prop-types\";\nimport { moods } from \"./moodConfig.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  max-width: 600px;\n  text-align: center;\n  margin: auto;\n  font-family: Poppins;\n  h1, h2 {\n    font-weight: 100;\n  }\n  background: none;\n  color: white;\n`;\n_c = Container;\nconst Title = styled.h1`\n  margin-top: 0;\n`;\n_c2 = Title;\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n_c3 = ButtonContainer;\nconst MoodH2 = styled.h2`\n`;\n_c4 = MoodH2;\nconst SimpleScreen = _ref => {\n  _s();\n  let {\n    token\n  } = _ref;\n  const [hasError, setHasError] = useState(false);\n  const [allContent, setAllContent] = useState(null);\n  const [currentPlaylistHTML, setCurrentPlaylistHTML] = useState(null);\n  const [fetchSuccess, setFetchSuccess] = useState(false);\n  useEffect(() => {\n    // Fetch all playlist info once\n    if (token && !fetchSuccess) {\n      const fetchData = async () => {\n        const response = await getSimple(token);\n        const data = response.data;\n        setAllContent(data);\n        setFetchSuccess(true);\n      };\n      try {\n        fetchData();\n      } catch {\n        setHasError(true);\n        setFetchSuccess(false);\n      }\n    }\n  }, [token, allContent, fetchSuccess]);\n\n  // Set/udpate the specific playlist info\n  const setContent = async mood => {\n    const recs = await getRecommendations(token, mood);\n    const oembed = await getOembed(recs.data.tracks[0].album.external_urls.spotify);\n    setCurrentPlaylistHTML(oembed.html);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"mood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n      children: Object.keys(moods).map(key => {\n        const mood = moods[key];\n        return /*#__PURE__*/_jsxDEV(MoodH2, {\n          id: \"update-btn\",\n          onClick: () => setContent(mood.tag),\n          children: mood.label\n        }, mood.tag, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), currentPlaylistHTML && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Container\",\n      dangerouslySetInnerHTML: {\n        __html: currentPlaylistHTML\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), hasError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleScreen, \"X2elOdn8jMgR5U6nKFvHmgTfoGc=\");\n_c5 = SimpleScreen;\nSimpleScreen.defaultProps = {\n  token: null\n};\nSimpleScreen.propTypes = {\n  token: PropTypes.string\n};\nexport default SimpleScreen;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"ButtonContainer\");\n$RefreshReg$(_c4, \"MoodH2\");\n$RefreshReg$(_c5, \"SimpleScreen\");","map":{"version":3,"names":["useEffect","useState","styled","getOembed","getRecommendations","getSimple","PropTypes","moods","Container","div","Title","h1","ButtonContainer","MoodH2","h2","SimpleScreen","token","hasError","setHasError","allContent","setAllContent","currentPlaylistHTML","setCurrentPlaylistHTML","fetchSuccess","setFetchSuccess","fetchData","response","data","setContent","mood","recs","oembed","tracks","album","external_urls","spotify","html","Object","keys","map","key","tag","label","__html","defaultProps","propTypes","string"],"sources":["/Users/leemadeleine/dev/music-app/music-app/src/components/SimpleScreen/SimpleScreen.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  getOembed,\n  getRecommendations,\n  getSimple,\n} from \"../../services/APIs/MusicAppAPI/MusicAppAPI.js\";\nimport PropTypes from \"prop-types\";\nimport { moods } from \"./moodConfig.js\";\n\nconst Container = styled.div`\n  max-width: 600px;\n  text-align: center;\n  margin: auto;\n  font-family: Poppins;\n  h1, h2 {\n    font-weight: 100;\n  }\n  background: none;\n  color: white;\n`;\n\nconst Title = styled.h1`\n  margin-top: 0;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst MoodH2 = styled.h2`\n`;\n\nconst SimpleScreen = ({ token }) => {\n  const [hasError, setHasError] = useState(false);\n  const [allContent, setAllContent] = useState(null);\n  const [currentPlaylistHTML, setCurrentPlaylistHTML] = useState(null);\n  const [fetchSuccess, setFetchSuccess] = useState(false);\n\n  useEffect(() => {\n    // Fetch all playlist info once\n    if (token && !fetchSuccess) {\n      const fetchData = async () => {\n        const response = await getSimple(token);\n        const data = response.data;\n        setAllContent(data);\n        setFetchSuccess(true);\n      };\n      try {\n        fetchData();\n      } catch {\n        setHasError(true);\n        setFetchSuccess(false);\n      }\n    }\n  }, [token, allContent, fetchSuccess]);\n\n  // Set/udpate the specific playlist info\n  const setContent = async (mood) => {\n    const recs = await getRecommendations(token, mood);\n    const oembed = await getOembed(\n      recs.data.tracks[0].album.external_urls.spotify\n    );\n    setCurrentPlaylistHTML(oembed.html);\n  };\n\n  return (\n    <Container>\n      <Title>mood</Title>\n      <ButtonContainer>\n        {Object.keys(moods).map((key) => {\n          const mood = moods[key];\n          return (\n            <MoodH2 key={mood.tag} id=\"update-btn\" onClick={() => setContent(mood.tag)}>\n              {mood.label}\n            </MoodH2>\n          )\n        })}\n      </ButtonContainer>\n      {currentPlaylistHTML && (\n        <div\n          className=\"Container\"\n          dangerouslySetInnerHTML={{ __html: currentPlaylistHTML }}\n        ></div>\n      )}\n      {hasError && <div>Error</div>}\n    </Container>\n  );\n};\n\nSimpleScreen.defaultProps = {\n  token: null,\n};\n\nSimpleScreen.propTypes = {\n  token: PropTypes.string,\n};\n\nexport default SimpleScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}