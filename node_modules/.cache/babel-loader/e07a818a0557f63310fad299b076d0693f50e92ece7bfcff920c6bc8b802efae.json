{"ast":null,"code":"var _jsxFileName = \"/Users/leemadeleine/dev/music-app/music-app/src/components/SimpleScreen/SimpleScreen.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { getOembed, getRecommendations, getSimple } from \"../../services/APIs/MusicAppAPI/MusicAppAPI.js\";\nimport PropTypes from \"prop-types\";\nimport { getRandomNumberMinMax } from \"../../utils/Utils.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div``;\n_c = Container;\nconst SimpleScreen = _ref => {\n  _s();\n  let {\n    token\n  } = _ref;\n  const [hasError, setHasError] = useState(false);\n  const [allContent, setAllContent] = useState(null);\n  const [currentPlaylistHTML, setCurrentPlaylistHTML] = useState(null);\n  const [fetchSuccess, setFetchSuccess] = useState(false);\n  useEffect(() => {\n    // Fetch all playlist info once\n    if (token && !fetchSuccess) {\n      const fetchData = async () => {\n        const response = await getSimple(token);\n        const data = response.data;\n        setAllContent(data);\n        setFetchSuccess(true);\n      };\n      try {\n        fetchData();\n      } catch {\n        setHasError(true);\n        setFetchSuccess(false);\n      }\n    }\n  }, [token, allContent, fetchSuccess]);\n\n  // Set/udpate the specific playlist info\n  const setContent = async () => {\n    const recs = await getRecommendations(token, \"happy\");\n    // console.log();\n    // const playlistInfo = allContent[getRandomNumberMinMax(0, 49)];\n    const oembed = await getOembed(recs.data.tracks[0].album.external_urls.spotify);\n    setCurrentPlaylistHTML(oembed.html);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Simple Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), allContent && /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"update-btn\",\n      onClick: () => setContent(),\n      children: \"Pull random playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), currentPlaylistHTML && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Container\",\n      dangerouslySetInnerHTML: {\n        __html: currentPlaylistHTML\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), hasError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleScreen, \"X2elOdn8jMgR5U6nKFvHmgTfoGc=\");\n_c2 = SimpleScreen;\nSimpleScreen.defaultProps = {\n  token: null\n};\nSimpleScreen.propTypes = {\n  token: PropTypes.string\n};\nexport default SimpleScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"SimpleScreen\");","map":{"version":3,"names":["useEffect","useState","styled","getOembed","getRecommendations","getSimple","PropTypes","getRandomNumberMinMax","Container","div","SimpleScreen","token","hasError","setHasError","allContent","setAllContent","currentPlaylistHTML","setCurrentPlaylistHTML","fetchSuccess","setFetchSuccess","fetchData","response","data","setContent","recs","oembed","tracks","album","external_urls","spotify","html","__html","defaultProps","propTypes","string"],"sources":["/Users/leemadeleine/dev/music-app/music-app/src/components/SimpleScreen/SimpleScreen.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  getOembed,\n  getRecommendations,\n  getSimple,\n} from \"../../services/APIs/MusicAppAPI/MusicAppAPI.js\";\nimport PropTypes from \"prop-types\";\nimport { getRandomNumberMinMax } from \"../../utils/Utils.js\";\n\nconst Container = styled.div``;\n\nconst SimpleScreen = ({ token }) => {\n  const [hasError, setHasError] = useState(false);\n  const [allContent, setAllContent] = useState(null);\n  const [currentPlaylistHTML, setCurrentPlaylistHTML] = useState(null);\n  const [fetchSuccess, setFetchSuccess] = useState(false);\n\n  useEffect(() => {\n    // Fetch all playlist info once\n    if (token && !fetchSuccess) {\n      const fetchData = async () => {\n        const response = await getSimple(token);\n        const data = response.data;\n        setAllContent(data);\n        setFetchSuccess(true);\n      };\n      try {\n        fetchData();\n      } catch {\n        setHasError(true);\n        setFetchSuccess(false);\n      }\n    }\n  }, [token, allContent, fetchSuccess]);\n\n  // Set/udpate the specific playlist info\n  const setContent = async () => {\n    const recs = await getRecommendations(token, \"happy\");\n    // console.log();\n    // const playlistInfo = allContent[getRandomNumberMinMax(0, 49)];\n    const oembed = await getOembed(\n      recs.data.tracks[0].album.external_urls.spotify\n    );\n    setCurrentPlaylistHTML(oembed.html);\n  };\n\n  return (\n    <Container>\n      <h1>Simple Screen</h1>\n      {allContent && (\n        <h2 id=\"update-btn\" onClick={() => setContent()}>\n          Pull random playlist\n        </h2>\n      )}\n      {currentPlaylistHTML && (\n        <div\n          className=\"Container\"\n          dangerouslySetInnerHTML={{ __html: currentPlaylistHTML }}\n        ></div>\n      )}\n      {hasError && <div>Error</div>}\n    </Container>\n  );\n};\n\nSimpleScreen.defaultProps = {\n  token: null,\n};\n\nSimpleScreen.propTypes = {\n  token: PropTypes.string,\n};\n\nexport default SimpleScreen;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SACEC,SAAS,EACTC,kBAAkB,EAClBC,SAAS,QACJ,gDAAgD;AACvD,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,qBAAqB,QAAQ,sBAAsB;AAAC;AAE7D,MAAMC,SAAS,GAAGN,MAAM,CAACO,GAAI,EAAC;AAAC,KAAzBD,SAAS;AAEf,MAAME,YAAY,GAAG,QAAe;EAAA;EAAA,IAAd;IAAEC;EAAM,CAAC;EAC7B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACe,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACd;IACA,IAAIW,KAAK,IAAI,CAACO,YAAY,EAAE;MAC1B,MAAME,SAAS,GAAG,YAAY;QAC5B,MAAMC,QAAQ,GAAG,MAAMhB,SAAS,CAACM,KAAK,CAAC;QACvC,MAAMW,IAAI,GAAGD,QAAQ,CAACC,IAAI;QAC1BP,aAAa,CAACO,IAAI,CAAC;QACnBH,eAAe,CAAC,IAAI,CAAC;MACvB,CAAC;MACD,IAAI;QACFC,SAAS,EAAE;MACb,CAAC,CAAC,MAAM;QACNP,WAAW,CAAC,IAAI,CAAC;QACjBM,eAAe,CAAC,KAAK,CAAC;MACxB;IACF;EACF,CAAC,EAAE,CAACR,KAAK,EAAEG,UAAU,EAAEI,YAAY,CAAC,CAAC;;EAErC;EACA,MAAMK,UAAU,GAAG,YAAY;IAC7B,MAAMC,IAAI,GAAG,MAAMpB,kBAAkB,CAACO,KAAK,EAAE,OAAO,CAAC;IACrD;IACA;IACA,MAAMc,MAAM,GAAG,MAAMtB,SAAS,CAC5BqB,IAAI,CAACF,IAAI,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAACC,aAAa,CAACC,OAAO,CAChD;IACDZ,sBAAsB,CAACQ,MAAM,CAACK,IAAI,CAAC;EACrC,CAAC;EAED,oBACE,QAAC,SAAS;IAAA,wBACR;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB,EACrBhB,UAAU,iBACT;MAAI,EAAE,EAAC,YAAY;MAAC,OAAO,EAAE,MAAMS,UAAU,EAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAGjD,EACAP,mBAAmB,iBAClB;MACE,SAAS,EAAC,WAAW;MACrB,uBAAuB,EAAE;QAAEe,MAAM,EAAEf;MAAoB;IAAE;MAAA;MAAA;MAAA;IAAA,QAE5D,EACAJ,QAAQ,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB;EAAA;IAAA;IAAA;IAAA;EAAA,QACnB;AAEhB,CAAC;AAAC,GApDIF,YAAY;AAAA,MAAZA,YAAY;AAsDlBA,YAAY,CAACsB,YAAY,GAAG;EAC1BrB,KAAK,EAAE;AACT,CAAC;AAEDD,YAAY,CAACuB,SAAS,GAAG;EACvBtB,KAAK,EAAEL,SAAS,CAAC4B;AACnB,CAAC;AAED,eAAexB,YAAY;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}